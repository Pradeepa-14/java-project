import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

// Main application window
public class Main extends Frame {
    public Main() {
        setTitle("Exam Management System");
        setSize(400, 300);
        setLayout(new FlowLayout());

        Button loginButton = new Button("Login");

        loginButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                new LoginWindow();
            }
        });

        add(loginButton);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        setVisible(true);
    }

    public static void main(String[] args) {
        new Main();  // Initialize the main window
    }
}

// Login Window (for instructor/student login)
class LoginWindow extends Frame {
    private TextField usernameField;
    private TextField passwordField;

    public LoginWindow() {
        setTitle("Login");
        setSize(300, 200);
        setLayout(new GridLayout(3, 2));

        Label usernameLabel = new Label("Username:");
        usernameField = new TextField();
        Label passwordLabel = new Label("Password:");
        passwordField = new TextField();
        passwordField.setEchoChar('*');
        Button loginButton = new Button("Login");

        loginButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                String password = passwordField.getText();

                // Check if user is instructor or student and proceed accordingly
                if (username.equalsIgnoreCase("instructor") && password.equals("instructor123")) {
                    new InstructorDashboard();
                    dispose();
                } else if (username.equalsIgnoreCase("student") && password.equals("student123")) {
                    new StudentDashboard();
                    dispose();
                } else {
                    showErrorMessage("Invalid credentials!");
                }
            }
        });

        add(usernameLabel);
        add(usernameField);
        add(passwordLabel);
        add(passwordField);
        add(loginButton);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });

        setVisible(true);
    }

    private void showErrorMessage(String message) {
        Frame errorFrame = new Frame("Error");
        errorFrame.setSize(200, 100);
        errorFrame.setLayout(new FlowLayout());
        Label errorLabel = new Label(message);
        errorFrame.add(errorLabel);
        errorFrame.setVisible(true);
    }
}

// Instructor Dashboard (for setting questions and scheduling the exam)
class InstructorDashboard extends Frame {
    private int numberOfQuestions;
    private TextField dateField;  // New TextField for date input

    public InstructorDashboard() {
        setTitle("Instructor Dashboard");
        setSize(400, 300);
        setLayout(new FlowLayout());

        // Set Number of Questions section
        Label questionCountLabel = new Label("Set Number of Questions:");
        final TextField questionCountField = new TextField(); // Make this final
        Button setQuestionsButton = new Button("Set Questions");

        setQuestionsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    numberOfQuestions = Integer.parseInt(questionCountField.getText());
                    new CreateExamWindow(numberOfQuestions);
                    dispose();  // Close the instructor dashboard
                } catch (NumberFormatException ex) {
                    showErrorMessage("Please enter a valid number.");
                }
            }
        });

        // Schedule Exam Date section
        Label dateLabel = new Label("Set Exam Date (MM/DD/YYYY):");
        dateField = new TextField();
        Button scheduleButton = new Button("Schedule Exam");

        scheduleButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String date = dateField.getText();
                if (isValidDate(date)) {
                    ExamData.setExamDate(date);
                    showMessage("Exam scheduled for " + date);
                } else {
                    showErrorMessage("Invalid date format. Use MM/DD/YYYY.");
                }
            }
        });

        add(questionCountLabel);
        add(questionCountField);
        add(setQuestionsButton);
        add(dateLabel);
        add(dateField);
        add(scheduleButton);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });

        setVisible(true);
    }

    private boolean isValidDate(String date) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
            sdf.setLenient(false);
            sdf.parse(date);  // Attempt to parse the date
            return true;
        } catch (Exception e) {
            return false;  // Invalid date format
        }
    }

    private void showErrorMessage(String message) {
        Frame errorFrame = new Frame("Error");
        errorFrame.setSize(200, 100);
        errorFrame.setLayout(new FlowLayout());
        Label errorLabel = new Label(message);
        errorFrame.add(errorLabel);
        errorFrame.setVisible(true);
    }

    private void showMessage(String message) {
        Frame messageFrame = new Frame("Message");
        messageFrame.setSize(200, 100);
        messageFrame.setLayout(new FlowLayout());
        Label messageLabel = new Label(message);
        messageFrame.add(messageLabel);
        messageFrame.setVisible(true);
    }
}

// Static class to hold the exam data
class ExamData {
    private static ArrayList<String> examQuestions;
    private static ArrayList<String> examAnswers;
    private static String examDate;  // New field to store the exam date

    public static void setExamQuestions(ArrayList<String> questions) {
        examQuestions = questions;
    }

    public static ArrayList<String> getExamQuestions() {
        return examQuestions;
    }

    public static void setExamAnswers(ArrayList<String> answers) {
        examAnswers = answers;
    }

    public static ArrayList<String> getExamAnswers() {
        return examAnswers;
    }

    // Set and get exam date
    public static void setExamDate(String date) {
        examDate = date;
    }

    public static String getExamDate() {
        return examDate;
    }
}

// Create Exam Window (for instructor to create the exam)
class CreateExamWindow extends Frame {
    private int numberOfQuestions;
    private ArrayList<String> questions;
    private ArrayList<String> answers;
    private TextField[] questionFields;
    private TextField[] answerFields;

    public CreateExamWindow(int numberOfQuestions) {
        this.numberOfQuestions = numberOfQuestions;
        this.questions = new ArrayList<>();
        this.answers = new ArrayList<>();

        setTitle("Create Exam");
        setSize(400, 300);
        setLayout(new GridLayout(numberOfQuestions + 2, 2));

        questionFields = new TextField[numberOfQuestions];
        answerFields = new TextField[numberOfQuestions];

        for (int i = 0; i < numberOfQuestions; i++) {
            Label questionLabel = new Label("Question " + (i + 1) + ":");
            TextField questionField = new TextField();
            questionFields[i] = questionField;
            Label answerLabel = new Label("Answer " + (i + 1) + ":");
            TextField answerField = new TextField();
            answerFields[i] = answerField;
            add(questionLabel);
            add(questionField);
            add(answerLabel);
            add(answerField);
        }

        Button saveButton = new Button("Save Exam");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                saveExam();
            }
        });

        add(saveButton);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });

        setVisible(true);
    }

    private void saveExam() {
        for (int i = 0; i < numberOfQuestions; i++) {
            questions.add(questionFields[i].getText());
            answers.add(answerFields[i].getText());
        }

        // Store the exam questions and answers in a static variable for global access
        ExamData.setExamQuestions(questions);
        ExamData.setExamAnswers(answers);

        System.out.println("Exam saved with " + numberOfQuestions + " questions.");
        for (int i = 0; i < numberOfQuestions; i++) {
            System.out.println("Question: " + questions.get(i) + ", Answer: " + answers.get(i));
        }
        dispose();  // Close the Create Exam window
    }
}

// Student Dashboard (for students to view exams)
class StudentDashboard extends Frame {
    public StudentDashboard() {
        setTitle("Student Dashboard");
        setSize(400, 300);
        setLayout(new FlowLayout());

        Button takeExamButton = new Button("Take Exam");

        takeExamButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                new TakeExamWindow();
            }
        });

        add(takeExamButton);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });

        setVisible(true);
    }
}

// Take Exam Window (for student to take the exam)
class TakeExamWindow extends Frame {
    private TextField[] answerFields;
    private Button submitButton;

    public TakeExamWindow() {
        setTitle("Take Exam");

        // Get questions and answers from the instructor
        ArrayList<String> questions = ExamData.getExamQuestions();
        ArrayList<String> correctAnswers = ExamData.getExamAnswers();
        String examDate = ExamData.getExamDate();

        // Ensure that the current date matches the scheduled exam date
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        String currentDate = sdf.format(new Date());
        if (!currentDate.equals(examDate)) {
            showMessage("The exam is scheduled for " + examDate + ". You cannot take it yet.");
            dispose();
            return;
        }

        if (questions == null || correctAnswers == null || questions.size() != correctAnswers.size()) {
            System.out.println("No exam data available.");
            dispose();
            return;
        }

        setSize(400, 300);
        setLayout(new GridLayout(questions.size() + 1, 2));

        answerFields = new TextField[questions.size()];
        for (int i = 0; i < questions.size(); i++) {
            Label questionLabel = new Label(questions.get(i));
            TextField answerField = new TextField();
            answerFields[i] = answerField;
            add(questionLabel);
            add(answerField);
        }

        submitButton = new Button("Submit Exam");
        submitButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                gradeExam(correctAnswers);
            }
        });
        add(submitButton);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });

        setVisible(true);
    }

    private void gradeExam(ArrayList<String> correctAnswers) {
        int score = 0;
        for (int i = 0; i < correctAnswers.size(); i++) {
            if (answerFields[i].getText().equalsIgnoreCase(correctAnswers.get(i))) {
                score++;
            }
        }
        showResult(score);
    }

    private void showResult(int score) {
        Frame resultFrame = new Frame("Exam Results");
        resultFrame.setSize(200, 100);
        resultFrame.setLayout(new FlowLayout());
        Label resultLabel = new Label("You scored " + score + " out of " + answerFields.length);
        resultFrame.add(resultLabel);
        resultFrame.setVisible(true);
    }

    private void showMessage(String message) {
        Frame messageFrame = new Frame("Message");
        messageFrame.setSize(200, 100);
        messageFrame.setLayout(new FlowLayout());
        Label messageLabel = new Label(message);
        messageFrame.add(messageLabel);
        messageFrame.setVisible(true);
    }
}
